const Main = require('./main.js');
var shape = Main.shape;

const Common = require('./common.js');
var printArr = Common.printArr;

/*

实现numpy.dot方法

关于numpy.dot方法的运行基本操作，请看dot.py和 书，细心看，一看你就能明白

关于numpy.dot的总结：

如：numpy.dot(a,b)

1、a或b都是数字，或，a或b其中一个是数字，则执行乘法

2、a和b都是一维数组，点积运算
条件：要求两个一维数组是一样长，如何计算，请看dot.py

3、a和b，一方是一维数组，另一方是二维及以上的数组，（如果a是一维，b是二维及以上，是一套规则（左行右列，准则））（如果a是二维及以上，b是一维，又是一套规则（左行右列，准则））
情况1：
a.shape = [3]，b.shape = [3,2]，dot(a,b).shape = [2]
上面的案例，左边是一维，右边是二维及以上，根据左行右列准则（左行右列准则，请在心中冥想，书上教的左行右列dot计算），要求右边数组倒数第二维的数量，与，左边一维的数量是一样的，才允许运算
如果 a.shape = [3]，b.shape = [4,2]，在进行dot运算时就会报错，报错原因是因为，a一维的数量是3，而b的倒数第二维是4，所以报错（心中冥想，书上教的左行右列dot计算，你就会知道为什么会报错）
如果 a.shape = [3]，b.shape = [5,4,3,2] 所得出的结果是 [5,4,2]
情况2：
a.shape = [2,3]，b.shape = [3]，dot(a,b).shape = [2]
上面的案例，左边是二维及以上，右边是一维，根据左行右列准则（左行右列准则，请在心中冥想，书上教的左行右列dot计算），要求左边最后一维的数量，与，右一维的数量是一样的，才允许运算
如果a.shape = [2,4]，b.shape = [3]，在进行dot运算时就会报错，报错原因是因为，a最后一维是4，而b一维的数量是3，所以报错（心中冥想，书上教的左行右列dot计算，你就会知道为什么会报错）
如果 a.shape = [5,4,2,3]，b.shape = [3] 所得出的结果是 [5,4,2]

4、a和b，都是二维数组，矩阵点积
如：a.shape = [4,3]，b.shape = [3,6]，dot(a,b).shape = [4,6]
要求左边数组的最后一维，与，右边数组的第一维，数量一样，才可以运算（如你有点糊涂，那请在心中冥想，书上教的左行右列dot计算）
如果a.shape = [4,3]，b.shape = [4,6]，就会报错，报错原因是因为，a的最后一维是3，而b的第一维是4，所以报错（心中冥想，书上教的左行右列dot计算，你就会知道为什么会报错）
如果 a.shape = [8,7]，b.shape = [7,9] 所得出的结果是 [8,9]

5、a和b，一边是二维，另一边是三维及以上，或，两边都是三维及以上
如：a.shape = [1,2,3,4]，b.shape = [5,6,4,7]，dot(a,b).shape = [1,2,3, 5,6, 7]
要求左边数组的最后一维，与，右边数组的倒数第二维，大小一样，才可以运算（如你有点糊涂，那请在心中冥想，书上教的左行右列dot计算）
如果a.shape = [1,2,3,4]，b.shape = [5,6,7,8]，在进行dot运算时就会报错，报错原因是因为，a最后一维是4，而b倒数第二维是7，所以报错（心中冥想，书上教的左行右列dot计算，你就会知道为什么会报错）
如果a.shape = [1,2]，b.shape = [5,6,2,8]，所得出的结果是 [1, 5,6, 8]
如果a.shape = [5,6,7,8]，b.shape = [8,9]，所得出的结果是 [5,6,7, 9]

我是如何观察到上面的规律的？
第一 得感谢讲dot的那本书，让我了解到了左行右列这种运算方式，
第二 在dot.py文件里的，各种形状数据，进行dot运算和实验，从大量的例子中尝试发现规律
第三 感谢numpy官网文档，和菜鸟教程文档
第四 感谢代码报错时，的报错提示信息

如何完成 重写dot方法 这样的任务？
第一（目标）设目标（或目的），（如，我要使用js重写dot方法）

第二（观察）找资料，写demo案例，进行大量实验，观察原始numpy是怎么运行的

第三（总结）根据上面实验，资料，获取到的信息，使用文字描述出 将要实现的功能，是干啥的，怎么运行，运行条件，运行注意事项等

第四（实现）根据上面的文字描述，使用代码实现功能
*/
