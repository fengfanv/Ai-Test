/*

实现numpy.reshape方法

要求：被实现方法必须支持，order：C 这种模式。


F模式看情况，不强制，因为没有用到。
目前F模式将数据拉成一维数据，可实现
目前F模式将数据reshape成2维数据也可实现
目前F模式将数据reshape成3维及以上的数据不可实现（没摸清3维以上的变形规律）



第一步，将多维数据拉成一维数据


第二步，使用处理好的一维数据变形，改变形状

*/

/*
按order:C的方式将数据拉成一维（将数据按C的方式展开）

思考下面方式时，请使用a这个数据作为思考对象
let a = [
    [1, 2, 3],
    [4, 5, 6]
]
递归的特点是，将一个复杂的问题，分解成一个一个小问题，来解决。

Array.concat方法，连接数组，然后返回一个新数组
*/
function ravel_C(arr){
    let newArr = [];
    for(let i=0;i<arr.length;i++){
        let item = arr[i];
        if(Array.isArray(item)){
            newArr = newArr.concat(ravel_C(item))
        }else{
            newArr.push(item);
        }
    }
    return newArr;
}



// let a = [
//     [
//         [
//             [
//                 [1, 2, 3],
//                 [4, 5, 6]
//             ],
//             [
//                 [7, 8, 9],
//                 [10, 11, 12]
//             ]
//         ],
//         [
//             [
//                 [13, 14, 15],
//                 [16, 17, 18]
//             ],
//             [
//                 [19, 20, 21],
//                 [22, 23, 24]
//             ]
//         ]
//     ],
//     [
//         [
//             [
//                 [1, 2, 3],
//                 [4, 5, 6]
//             ],
//             [
//                 [7, 8, 9],
//                 [10, 11, 12]
//             ]
//         ],
//         [
//             [
//                 [13, 14, 15],
//                 [16, 17, 18]
//             ],
//             [
//                 [19, 20, 21],
//                 [22, 23, 24]
//             ]
//         ]
//     ]

// ]
// console.log(ravel_C(a))

/*
按order:F的方式将数据拉成一维（将数据按F的方式展开）


*/
